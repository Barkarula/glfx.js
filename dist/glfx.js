var fx=function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/",r(r.s=31)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.simpleShader=t.gl=t.canvas=void 0;var n=r(28),o=r(27),a=r(26),l=r(25),i=r(24),s=r(23),c=r(22),u=r(21),d=r(19),g=r(18),h=r(17),f=r(16),x=r(15),v=r(14),m=r(13),p=r(12),b=r(11),_=r(10),T=r(9),y=r(8),S=r(7),E=r(6),w=r(5),C=r(4),R=r(3),A=r(1),D=void 0;function F(e){return{_:e,loadContentsOf:function(e){t.gl=D=this._.gl,this._.loadContentsOf(e)},destroy:function(){t.gl=D=this._.gl,this._.destroy()}}}function P(e){return F(n.Texture.fromElement(e))}function B(e,t,r){return this._.isInitialized&&e._.width==this.width&&e._.height==this.height||function(e,t){var r=D.UNSIGNED_BYTE;if(D.getExtension("OES_texture_float")&&D.getExtension("OES_texture_float_linear")){var o=new n.Texture(100,100,D.RGBA,D.FLOAT);try{o.drawTo(function(){r=D.FLOAT})}catch(e){}o.destroy()}this._.texture&&this._.texture.destroy(),this._.spareTexture&&this._.spareTexture.destroy(),this.width=e,this.height=t,this._.texture=new n.Texture(e,t,D.RGBA,r),this._.spareTexture=new n.Texture(e,t,D.RGBA,r),this._.extraTexture=this._.extraTexture||new n.Texture(0,0,D.RGBA,r),this._.flippedShader=this._.flippedShader||new A.Shader(null,"\n      uniform sampler2D texture;\n      varying vec2 texCoord;\n      void main() {\n          gl_FragColor = texture2D(texture, vec2(texCoord.x, 1.0 - texCoord.y));\n      }\n    "),this._.isInitialized=!0}.call(this,t||e._.width,r||e._.height),e._.use(),this._.texture.drawTo(function(){A.Shader.getDefaultShader().drawRect()}),this}function M(){return this._.texture.use(),this._.flippedShader.drawRect(),this}function O(e){return e.parentNode.insertBefore(this,e),e.parentNode.removeChild(e),this}function U(){var e=new n.Texture(this._.texture.width,this._.texture.height,D.RGBA,D.UNSIGNED_BYTE);return this._.texture.use(),e.drawTo(function(){A.Shader.getDefaultShader().drawRect()}),F(e)}function k(){var e=this._.texture.width,t=this._.texture.height,r=new Uint8Array(e*t*4);return this._.texture.drawTo(function(){D.readPixels(0,0,e,t,D.RGBA,D.UNSIGNED_BYTE,r)}),r}function z(e){return function(){return t.gl=D=this._.gl,e.apply(this,arguments)}}t.canvas=function(){var e=document.createElement("canvas");try{t.gl=D=e.getContext("experimental-webgl",{premultipliedAlpha:!1})}catch(e){t.gl=D=null}if(!D)throw"This browser does not support WebGL";return e._={gl:D,isInitialized:!1,texture:null,spareTexture:null,flippedShader:null},e.texture=z(P),e.draw=z(B),e.update=z(M),e.replace=z(O),e.contents=z(U),e.getPixelArray=z(k),e.brightnessContrast=z(o.brightnessContrast),e.hexagonalPixelate=z(a.hexagonalPixelate),e.hueSaturation=z(l.hueSaturation),e.colorHalftone=z(i.colorHalftone),e.triangleBlur=z(s.triangleBlur),e.unsharpMask=z(c.unsharpMask),e.perspective=z(u.perspective),e.matrixWarp=z(d.matrixWarp),e.bulgePinch=z(g.bulgePinch),e.tiltShift=z(h.tiltShift),e.dotScreen=z(f.dotScreen),e.edgeWork=z(x.edgeWork),e.lensBlur=z(v.lensBlur),e.zoomBlur=z(m.zoomBlur),e.noise=z(p.noise),e.denoise=z(b.denoise),e.curves=z(_.curves),e.swirl=z(T.swirl),e.ink=z(y.ink),e.vignette=z(S.vignette),e.vibrance=z(E.vibrance),e.sepia=z(w.sepia),e.feColorMatrix=z(C.feColorMatrix),e.blend=z(R.blend),e},t.gl=D,t.simpleShader=function(e,t,r,n){(r||this._.texture).use(),this._.spareTexture.drawTo(function(){e.uniforms(t).drawRect()}),this._.spareTexture.swapWith(n||this._.texture)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Shader=void 0;var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0);function a(e){return"[object Array]"==Object.prototype.toString.call(e)}function l(e){return"[object Number]"==Object.prototype.toString.call(e)}function i(e,t){var r=o.gl.createShader(e);if(o.gl.shaderSource(r,t),o.gl.compileShader(r),!o.gl.getShaderParameter(r,o.gl.COMPILE_STATUS))throw"compile error: "+o.gl.getShaderInfoLog(r);return r}var s="\n    attribute vec2 vertex;\n    attribute vec2 _texCoord;\n    varying vec2 texCoord;\n    void main() {\n        texCoord = _texCoord;\n        gl_Position = vec4(vertex * 2.0 - 1.0, 0.0, 1.0);\n    }",c="\n    uniform sampler2D texture;\n    varying vec2 texCoord;\n    void main() {\n        gl_FragColor = texture2D(texture, texCoord);\n    }",u=function(){function e(t,r){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.vertexAttribute=null,this.texCoordAttribute=null,this.program=o.gl.createProgram(),t=t||s,r="precision highp float;"+(r=r||c),o.gl.attachShader(this.program,i(o.gl.VERTEX_SHADER,t)),o.gl.attachShader(this.program,i(o.gl.FRAGMENT_SHADER,r)),o.gl.linkProgram(this.program),!o.gl.getProgramParameter(this.program,o.gl.LINK_STATUS))throw"link error: "+o.gl.getProgramInfoLog(this.program)}return n(e,[{key:"destroy",value:function(){o.gl.deleteProgram(this.program),this.program=null}},{key:"uniforms",value:function(e){for(var t in o.gl.useProgram(this.program),e)if(e.hasOwnProperty(t)){var r=o.gl.getUniformLocation(this.program,t);if(null!==r){var n=e[t];if(a(n))switch(n.length){case 1:o.gl.uniform1fv(r,new Float32Array(n));break;case 2:o.gl.uniform2fv(r,new Float32Array(n));break;case 3:o.gl.uniform3fv(r,new Float32Array(n));break;case 4:o.gl.uniform4fv(r,new Float32Array(n));break;case 9:o.gl.uniformMatrix3fv(r,!1,new Float32Array(n));break;case 16:o.gl.uniformMatrix4fv(r,!1,new Float32Array(n));break;default:throw"dont't know how to load uniform \""+t+'" of length '+n.length}else{if(!l(n))throw'attempted to set uniform "'+t+'" to invalid value '+(n||"undefined").toString();o.gl.uniform1f(r,n)}}}return this}},{key:"textures",value:function(e){for(var t in o.gl.useProgram(this.program),e)e.hasOwnProperty(t)&&o.gl.uniform1i(o.gl.getUniformLocation(this.program,t),e[t]);return this}},{key:"drawRect",value:function(e,t,r,n){var a=o.gl.getParameter(o.gl.VIEWPORT);t=void 0!==t?(t-a[1])/a[3]:0,e=void 0!==e?(e-a[0])/a[2]:0,r=void 0!==r?(r-a[0])/a[2]:1,n=void 0!==n?(n-a[1])/a[3]:1,null==o.gl.vertexBuffer&&(o.gl.vertexBuffer=o.gl.createBuffer()),o.gl.bindBuffer(o.gl.ARRAY_BUFFER,o.gl.vertexBuffer),o.gl.bufferData(o.gl.ARRAY_BUFFER,new Float32Array([e,t,e,n,r,t,r,n]),o.gl.STATIC_DRAW),null==o.gl.texCoordBuffer&&(o.gl.texCoordBuffer=o.gl.createBuffer(),o.gl.bindBuffer(o.gl.ARRAY_BUFFER,o.gl.texCoordBuffer),o.gl.bufferData(o.gl.ARRAY_BUFFER,new Float32Array([0,0,0,1,1,0,1,1]),o.gl.STATIC_DRAW)),null==this.vertexAttribute&&(this.vertexAttribute=o.gl.getAttribLocation(this.program,"vertex"),o.gl.enableVertexAttribArray(this.vertexAttribute)),null==this.texCoordAttribute&&(this.texCoordAttribute=o.gl.getAttribLocation(this.program,"_texCoord"),o.gl.enableVertexAttribArray(this.texCoordAttribute)),o.gl.useProgram(this.program),o.gl.bindBuffer(o.gl.ARRAY_BUFFER,o.gl.vertexBuffer),o.gl.vertexAttribPointer(this.vertexAttribute,2,o.gl.FLOAT,!1,0,0),o.gl.bindBuffer(o.gl.ARRAY_BUFFER,o.gl.texCoordBuffer),o.gl.vertexAttribPointer(this.texCoordAttribute,2,o.gl.FLOAT,!1,0,0),o.gl.drawArrays(o.gl.TRIANGLE_STRIP,0,4)}}],[{key:"getDefaultShader",value:function(){return o.gl.defaultShader=o.gl.defaultShader||new e,o.gl.defaultShader}}]),e}();t.Shader=u},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.randomShaderFunc=t.warpShader=void 0;var n=r(1);t.warpShader=function(e,t){return new n.Shader(null,e+"\n    uniform sampler2D texture;\n    uniform vec2 texSize;\n    varying vec2 texCoord;\n    void main() {\n        vec2 coord = texCoord * texSize;\n        "+t+"\n        gl_FragColor = texture2D(texture, coord / texSize);\n        vec2 clampedCoord = clamp(coord, vec2(0.0), texSize);\n        if (coord != clampedCoord) {\n            gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));\n        }\n    }")},t.randomShaderFunc="\nfloat random(vec3 scale, float seed) {\n    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n}"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.blend=void 0;var n=r(0),o=r(1);t.blend=function(e,t,r){var a=void 0;switch(t){case"add":a="src + dest;";break;case"subtract":a="src - dest;";break;case"multiply":a="src * dest;";break;case"darken":a="min(src, dest);";break;case"lighten":a="max(src, dest);";break;case"color-burn":a="vec3((src.r == 0.0) ? 0.0 : (1.0 - ((1.0 - dest.r) / src.r)),(src.g == 0.0) ? 0.0 : (1.0 - ((1.0 - dest.g) / src.g)),(src.b == 0.0) ? 0.0 : (1.0 - ((1.0 - dest.b) / src.b)));";break;case"linear-burn":a="(src + dest) - 1.0;";break;case"screen":a="(src + dest) - (src * dest);";break;case"color-dodge":a="vec3((src.r == 1.0) ? 1.0 : min(1.0, dest.r / (1.0 - src.r)),(src.g == 1.0) ? 1.0 : min(1.0, dest.g / (1.0 - src.g)),(src.b == 1.0) ? 1.0 : min(1.0, dest.b / (1.0 - src.b)));";break;case"linear-dodge":a="src + dest;";break;case"overlay":a="vec3((dest.r <= 0.5) ? (2.0 * src.r * dest.r) : (1.0 - 2.0 * (1.0 - dest.r) * (1.0 - src.r)),(dest.g <= 0.5) ? (2.0 * src.g * dest.g) : (1.0 - 2.0 * (1.0 - dest.g) * (1.0 - src.g)),(dest.b <= 0.5) ? (2.0 * src.b * dest.b) : (1.0 - 2.0 * (1.0 - dest.b) * (1.0 - src.b)));";break;case"soft-light":a="vec3((src.r <= 0.5) ? (dest.r - (1.0 - 2.0 * src.r) * dest.r * (1.0 - dest.r)) : (((src.r > 0.5) && (dest.r <= 0.25)) ? (dest.r + (2.0 * src.r - 1.0) * (4.0 * dest.r * (4.0 * dest.r + 1.0) * (dest.r - 1.0) + 7.0 * dest.r)) : (dest.r + (2.0 * src.r - 1.0) * (sqrt(dest.r) - dest.r))),(src.g <= 0.5) ? (dest.g - (1.0 - 2.0 * src.g) * dest.g * (1.0 - dest.g)) : (((src.g > 0.5) && (dest.g <= 0.25)) ? (dest.g + (2.0 * src.g - 1.0) * (4.0 * dest.g * (4.0 * dest.g + 1.0) * (dest.g - 1.0) + 7.0 * dest.g)) : (dest.g + (2.0 * src.g - 1.0) * (sqrt(dest.g) - dest.g))),(src.b <= 0.5) ? (dest.b - (1.0 - 2.0 * src.b) * dest.b * (1.0 - dest.b)) : (((src.b > 0.5) && (dest.b <= 0.25)) ? (dest.b + (2.0 * src.b - 1.0) * (4.0 * dest.b * (4.0 * dest.b + 1.0) * (dest.b - 1.0) + 7.0 * dest.b)) : (dest.b + (2.0 * src.b - 1.0) * (sqrt(dest.b) - dest.b))));";break;case"hard-light":a="vec3((src.r <= 0.5) ? (2.0 * src.r * dest.r) : (1.0 - 2.0 * (1.0 - src.r) * (1.0 - dest.r)),(src.g <= 0.5) ? (2.0 * src.g * dest.g) : (1.0 - 2.0 * (1.0 - src.g) * (1.0 - dest.g)),(src.b <= 0.5) ? (2.0 * src.b * dest.b) : (1.0 - 2.0 * (1.0 - src.b) * (1.0 - dest.b)));";break;case"vivid-light":a="vec3((src.r <= 0.5) ? (1.0 - (1.0 - dest.r) / (2.0 * src.r)) : (dest.r / (2.0 * (1.0 - src.r))),(src.g <= 0.5) ? (1.0 - (1.0 - dest.g) / (2.0 * src.g)) : (dest.g / (2.0 * (1.0 - src.g))),(src.b <= 0.5) ? (1.0 - (1.0 - dest.b) / (2.0 * src.b)) : (dest.b / (2.0 * (1.0 - src.b))));";break;case"linear-light":a="2.0 * src + dest - 1.0;";break;case"pin-light":a="vec3((src.r > 0.5) ? max(dest.r, 2.0 * (src.r - 0.5)) : min(dest.r, 2.0 * src.r),(src.r > 0.5) ? max(dest.g, 2.0 * (src.g - 0.5)) : min(dest.g, 2.0 * src.g),(src.b > 0.5) ? max(dest.b, 2.0 * (src.b - 0.5)) : min(dest.b, 2.0 * src.b));";break;case"differece":a="abs(dest - src);";break;case"exclusion":a="src + dest - 2.0 * src * dest;";break;default:a="mix(src, dest, 1.0);"}return n.gl.blend=n.gl.blend||new o.Shader(null,"\n      uniform sampler2D originalTexture;\n      uniform sampler2D blendTexture;\n      uniform float strength;\n      varying vec2 texCoord;\n      \n      vec3 blend (vec3 dest, vec3 src) {\n          return "+a+"\n      }\n      \n      void main() {\n        vec4 destColor = texture2D(originalTexture, texCoord);\n        vec4 srcColor = texture2D(blendTexture, texCoord);\n        vec3 blendedColor = clamp(blend(destColor.rgb, srcColor.rgb), 0.0, 1.0);\n        float destAlpha = srcColor.a + destColor.a * (1.0 - srcColor.a);\n        gl_FragColor.rgb = srcColor.a * ((1.0 - destColor.a) * srcColor.rgb + destColor.a * blendedColor) + (1.0 - srcColor.a) * destColor.a * destColor.rgb;\n        gl_FragColor.r = ((gl_FragColor.r / 255.0) / destAlpha) * 255.0;\n        gl_FragColor.g = ((gl_FragColor.g / 255.0) / destAlpha) * 255.0;\n        gl_FragColor.b = ((gl_FragColor.b / 255.0) / destAlpha) * 255.0;\n        gl_FragColor.a = destAlpha;\n      }\n    "),this._.extraTexture=e._,this._.extraTexture.use(1),n.gl.blend.textures({originalTexture:0,blendTexture:1}),n.simpleShader.call(this,n.gl.blend,{strength:r}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.feColorMatrix=void 0;var n=r(0),o=r(1);t.feColorMatrix=function(e){n.gl.feColorMatrix=n.gl.feColorMatrix||new o.Shader(null,"\n        uniform sampler2D texture;\n      \tuniform mat4 matrix;\n      \tuniform vec4 multiplier;\n        varying vec2 texCoord;\n        \n      \tvoid main() {\n      \t  vec4 color = texture2D(texture, texCoord);\n      \t  mat4 colMat = mat4(\n        \t\tcolor.r, 0, 0, 0,\n        \t\t0, color.g, 0, 0,\n        \t\t0, 0, color.b, 0,\n        \t\t0, 0, 0, color.a\n          );\n      \t  mat4 product = colMat * matrix;\n      \t  color.r = product[0].x + product[0].y + product[0].z + product[0].w + multiplier[0];\n      \t  color.g = product[1].x + product[1].y + product[1].z + product[1].w + multiplier[1];\n      \t  color.b = product[2].x + product[2].y + product[2].z + product[2].w + multiplier[2];\n      \t  color.a = product[3].x + product[3].y + product[3].z + product[3].w + multiplier[3];\n      \t  gl_FragColor = color;\n      \t}\n    ");var t=[];return e="string"==typeof e?e.split(" "):e,t.push(e.splice(3,1)[0]),t.push(e.splice(8,1)[0]),t.push(e.splice(12,1)[0]),t.push(e.splice(16,1)[0]),n.simpleShader.call(this,n.gl.feColorMatrix,{matrix:e,multiplier:t}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sepia=void 0;var n=r(0),o=r(1);t.sepia=function(e){return n.gl.sepia=n.gl.sepia||new o.Shader(null,"\n        uniform sampler2D texture;\n        uniform float amount;\n        varying vec2 texCoord;\n        void main() {\n            vec4 color = texture2D(texture, texCoord);\n            float r = color.r;\n            float g = color.g;\n            float b = color.b;\n            \n            color.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));\n            color.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));\n            color.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));\n            \n            gl_FragColor = color;\n        }\n    "),n.simpleShader.call(this,n.gl.sepia,{amount:clamp(0,e,1)}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vibrance=void 0;var n=r(0),o=r(1);t.vibrance=function(e){return n.gl.vibrance=n.gl.vibrance||new o.Shader(null,"\n        uniform sampler2D texture;\n        uniform float amount;\n        varying vec2 texCoord;\n        void main() {\n            vec4 color = texture2D(texture, texCoord);\n            float average = (color.r + color.g + color.b) / 3.0;\n            float mx = max(color.r, max(color.g, color.b));\n            float amt = (mx - average) * (-amount * 3.0);\n            color.rgb = mix(color.rgb, vec3(mx), amt);\n            gl_FragColor = color;\n        }\n    "),n.simpleShader.call(this,n.gl.vibrance,{amount:clamp(-1,e,1)}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vignette=void 0;var n=r(0),o=r(1);t.vignette=function(e,t){return n.gl.vignette=n.gl.vignette||new o.Shader(null,"\n        uniform sampler2D texture;\n        uniform float size;\n        uniform float amount;\n        varying vec2 texCoord;\n        void main() {\n            vec4 color = texture2D(texture, texCoord);\n            \n            float dist = distance(texCoord, vec2(0.5, 0.5));\n            color.rgb *= smoothstep(0.8, size * 0.799, dist * (amount + size));\n            \n            gl_FragColor = color;\n        }\n    "),n.simpleShader.call(this,n.gl.vignette,{size:clamp(0,e,1),amount:clamp(0,t,1)}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ink=void 0;var n=r(0),o=r(1);t.ink=function(e){return n.gl.ink=n.gl.ink||new o.Shader(null,"\n          uniform sampler2D texture;\n          uniform float strength;\n          uniform vec2 texSize;\n          varying vec2 texCoord;\n          void main() {\n              vec2 dx = vec2(1.0 / texSize.x, 0.0);\n              vec2 dy = vec2(0.0, 1.0 / texSize.y);\n              vec4 color = texture2D(texture, texCoord);\n              float bigTotal = 0.0;\n              float smallTotal = 0.0;\n              vec3 bigAverage = vec3(0.0);\n              vec3 smallAverage = vec3(0.0);\n              for (float x = -2.0; x <= 2.0; x += 1.0) {\n                  for (float y = -2.0; y <= 2.0; y += 1.0) {\n                      vec3 sample = texture2D(texture, texCoord + dx * x + dy * y).rgb;\n                      bigAverage += sample;\n                      bigTotal += 1.0;\n                      if (abs(x) + abs(y) < 2.0) {\n                          smallAverage += sample;\n                          smallTotal += 1.0;\n                      }\n                  }\n              }\n              vec3 edge = max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);\n              gl_FragColor = vec4(color.rgb - dot(edge, edge) * strength * 100000.0, color.a);\n          }\n      "),n.simpleShader.call(this,n.gl.ink,{strength:e*e*e*e*e,texSize:[this.width,this.height]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.swirl=void 0;var n=r(0),o=r(2);t.swirl=function(e,t,r,a){return n.gl.swirl=n.gl.swirl||(0,o.warpShader)("\n        uniform float radius;\n        uniform float angle;\n        uniform vec2 center;\n    ","\n        coord -= center;\n        float distance = length(coord);\n        if (distance < radius) {\n            float percent = (radius - distance) / radius;\n            float theta = percent * percent * angle;\n            float s = sin(theta);\n            float c = cos(theta);\n            coord = vec2(\n                coord.x * c - coord.y * s,\n                coord.x * s + coord.y * c\n            );\n        }\n        coord += center;\n    "),n.simpleShader.call(this,n.gl.swirl,{radius:r,center:[e,t],angle:a,texSize:[this.width,this.height]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.curves=void 0;var n=r(0),o=r(1);function a(e){for(var t=new SplineInterpolator(e),r=[],n=0;n<256;n++)r.push(clamp(0,Math.floor(256*t.interpolate(n/255)),255));return r}t.curves=function(e,t,r){e=a(e),1==arguments.length?t=r=e:(t=a(t),r=a(r));for(var l=[],i=0;i<256;i++)l.splice(l.length,0,e[i],t[i],r[i],255);return this._.extraTexture.initFromBytes(256,1,l),this._.extraTexture.use(1),n.gl.curves=n.gl.curves||new o.Shader(null,"\n          uniform sampler2D texture;\n          uniform sampler2D map;\n          varying vec2 texCoord;\n          void main() {\n              vec4 color = texture2D(texture, texCoord);\n              color.r = texture2D(map, vec2(color.r)).r;\n              color.g = texture2D(map, vec2(color.g)).g;\n              color.b = texture2D(map, vec2(color.b)).b;\n              gl_FragColor = color;\n          }\n      "),n.gl.curves.textures({map:1}),n.simpleShader.call(this,n.gl.curves,{}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.denoise=void 0;var n=r(0),o=r(1);t.denoise=function(e){n.gl.denoise=n.gl.denoise||new o.Shader(null,"\n        uniform sampler2D texture;\n        uniform float exponent;\n        uniform float strength;\n        uniform vec2 texSize;\n        varying vec2 texCoord;\n        void main() {\n            vec4 center = texture2D(texture, texCoord);\n            vec4 color = vec4(0.0);\n            float total = 0.0;\n            for (float x = -4.0; x <= 4.0; x += 1.0) {\n                for (float y = -4.0; y <= 4.0; y += 1.0) {\n                    vec4 sample = texture2D(texture, texCoord + vec2(x, y) / texSize);\n                    float weight = 1.0 - abs(dot(sample.rgb - center.rgb, vec3(0.25)));\n                    weight = pow(weight, exponent);\n                    color += sample * weight;\n                    total += weight;\n                }\n            }\n            gl_FragColor = color / total;\n        }\n    ");for(var t=0;t<2;t++)n.simpleShader.call(this,n.gl.denoise,{exponent:Math.max(0,e),texSize:[this.width,this.height]});return this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.noise=void 0;var n=r(0),o=r(1);t.noise=function(e){return n.gl.noise=n.gl.noise||new o.Shader(null,"\n        uniform sampler2D texture;\n        uniform float amount;\n        varying vec2 texCoord;\n        float rand(vec2 co) {\n            return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n        }\n        void main() {\n            vec4 color = texture2D(texture, texCoord);\n            \n            float diff = (rand(texCoord) - 0.5) * amount;\n            color.r += diff;\n            color.g += diff;\n            color.b += diff;\n            \n            gl_FragColor = color;\n        }\n    '"),n.simpleShader.call(this,n.gl.noise,{amount:clamp(0,e,1)}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.zoomBlur=void 0;var n=r(0),o=r(2),a=r(1);t.zoomBlur=function(e,t,r){return n.gl.zoomBlur=n.gl.zoomBlur||new a.Shader(null,"\n        uniform sampler2D texture;\n        uniform vec2 center;\n        uniform float strength;\n        uniform vec2 texSize;\n        varying vec2 texCoord;\n        "+o.randomShaderFunc+"\n        void main() {\n            vec4 color = vec4(0.0);\n            float total = 0.0;\n            vec2 toCenter = center - texCoord * texSize;\n            float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n            \n            for (float t = 0.0; t <= 40.0; t++) {\n                float percent = (t + offset) / 40.0;\n                float weight = 4.0 * (percent - percent * percent);\n                vec4 sample = texture2D(texture, texCoord + toCenter * percent * strength / texSize);\n\n                sample.rgb *= sample.a;\n                color += sample * weight;\n                total += weight;\n            }\n            gl_FragColor = color / total;\n            gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n        }\n    "),n.simpleShader.call(this,n.gl.zoomBlur,{center:[e,t],strength:r,texSize:[this.width,this.height]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.lensBlur=void 0;var n=r(0),o=r(2),a=r(1);t.lensBlur=function(e,t,r){n.gl.lensBlurPrePass=n.gl.lensBlurPrePass||new a.Shader(null,"\n          uniform sampler2D texture;\n          uniform float power;\n          varying vec2 texCoord;\n          void main() {\n              vec4 color = texture2D(texture, texCoord);\n              color = pow(color, vec4(power));\n              gl_FragColor = vec4(color);\n          }");var l="\n      uniform sampler2D texture0;\n      uniform sampler2D texture1;\n      uniform vec2 delta0;\n      uniform vec2 delta1;\n      uniform float power;\n      varying vec2 texCoord;\n      "+o.randomShaderFunc+"\n      vec4 sample(vec2 delta) {\n          float offset = random(vec3(delta, 151.7182), 0.0);\n          \n          vec4 color = vec4(0.0);\n          float total = 0.0;\n          for (float t = 0.0; t <= 30.0; t++) {\n              float percent = (t + offset) / 30.0;\n              color += texture2D(texture0, texCoord + delta * percent);\n              total += 1.0;\n          }\n          return color / total;\n      }";n.gl.lensBlur0=n.gl.lensBlur0||new a.Shader(null,"\n        "+l+"\n          void main() {\n              gl_FragColor = sample(delta0);\n          }\n      "),n.gl.lensBlur1=n.gl.lensBlur1||new a.Shader(null,"\n          "+l+"\n          void main() {\n              gl_FragColor = (sample(delta0) + sample(delta1)) * 0.5;\n          }"),n.gl.lensBlur2=n.gl.lensBlur2||new a.Shader(null,"\n          "+l+"\n          void main() {\n              vec4 color = (sample(delta0) + 2.0 * texture2D(texture1, texCoord)) / 3.0;\n              gl_FragColor = pow(color, vec4(power));\n          }").textures({texture1:1});for(var i=[],s=0;s<3;s++){var c=r+s*Math.PI*2/3;i.push([e*Math.sin(c)/this.width,e*Math.cos(c)/this.height])}var u=Math.pow(10,clamp(-1,t,1));return n.simpleShader.call(this,n.gl.lensBlurPrePass,{power:u}),this._.extraTexture.ensureFormat(this._.texture),n.simpleShader.call(this,n.gl.lensBlur0,{delta0:i[0]},this._.texture,this._.extraTexture),n.simpleShader.call(this,n.gl.lensBlur1,{delta0:i[1],delta1:i[2]},this._.extraTexture,this._.extraTexture),n.simpleShader.call(this,n.gl.lensBlur0,{delta0:i[1]}),this._.extraTexture.use(1),n.simpleShader.call(this,n.gl.lensBlur2,{power:1/u,delta0:i[2]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.edgeWork=void 0;var n=r(0),o=r(2),a=r(1);t.edgeWork=function(e){return n.gl.edgeWork1=n.gl.edgeWork1||new a.Shader(null,"\n        uniform sampler2D texture;\n        uniform vec2 delta;\n        varying vec2 texCoord;\n        "+o.randomShaderFunc+"\n        void main() {\n            vec2 color = vec2(0.0);\n            vec2 total = vec2(0.0);\n            \n            /* randomize the lookup values to hide the fixed number of samples */\n            float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n            \n            for (float t = -30.0; t <= 30.0; t++) {\n                float percent = (t + offset - 0.5) / 30.0;\n                float weight = 1.0 - abs(percent);\n                vec3 sample = texture2D(texture, texCoord + delta * percent).rgb;\n                float average = (sample.r + sample.g + sample.b) / 3.0;\n                color.x += average * weight;\n                total.x += weight;\n                if (abs(t) < 15.0) {\n                    weight = weight * 2.0 - 1.0;\n                    color.y += average * weight;\n                    total.y += weight;\n                }\n            }\n            gl_FragColor = vec4(color / total, 0.0, 1.0);\n        }\n    "),n.gl.edgeWork2=n.gl.edgeWork2||new a.Shader(null,"\n        uniform sampler2D texture;\n        uniform vec2 delta;\n        varying vec2 texCoord;\n        "+o.randomShaderFunc+"\n        void main() {\n            vec2 color = vec2(0.0);\n            vec2 total = vec2(0.0);\n            \n            float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n            \n            for (float t = -30.0; t <= 30.0; t++) {\n                float percent = (t + offset - 0.5) / 30.0;\n                float weight = 1.0 - abs(percent);\n                vec2 sample = texture2D(texture, texCoord + delta * percent).xy;\n                color.x += sample.x * weight;\n                total.x += weight;\n                if (abs(t) < 15.0) {\n                    weight = weight * 2.0 - 1.0;\n                    color.y += sample.y * weight;\n                    total.y += weight;\n                }\n            }\n            float c = clamp(10000.0 * (color.y / total.y - color.x / total.x) + 0.5, 0.0, 1.0);\n            gl_FragColor = vec4(c, c, c, 1.0);\n        }\n    "),n.simpleShader.call(this,n.gl.edgeWork1,{delta:[e/this.width,0]}),n.simpleShader.call(this,n.gl.edgeWork2,{delta:[0,e/this.height]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dotScreen=void 0;var n=r(0),o=r(1);t.dotScreen=function(e,t,r,a){return n.gl.dotScreen=n.gl.dotScreen||new o.Shader(null,"\n        uniform sampler2D texture;\n        uniform vec2 center;\n        uniform float angle;\n        uniform float scale;\n        uniform vec2 texSize;\n        varying vec2 texCoord;\n        \n        float pattern() {\n            float s = sin(angle), c = cos(angle);\n            vec2 tex = texCoord * texSize - center;\n            vec2 point = vec2(\n                c * tex.x - s * tex.y,\n                s * tex.x + c * tex.y\n            ) * scale;\n            return (sin(point.x) * sin(point.y)) * 4.0;\n        }\n        \n        void main() {\n            vec4 color = texture2D(texture, texCoord);\n            float average = (color.r + color.g + color.b) / 3.0;\n            gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);\n        }\n    "),n.simpleShader.call(this,n.gl.dotScreen,{center:[e,t],angle:r,scale:Math.PI/a,texSize:[this.width,this.height]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.tiltShift=void 0;var n=r(0),o=r(2),a=r(1);t.tiltShift=function(e,t,r,l,i,s){n.gl.tiltShift=n.gl.tiltShift||new a.Shader(null,"\n        uniform sampler2D texture;\n        uniform float blurRadius;\n        uniform float gradientRadius;\n        uniform vec2 start;\n        uniform vec2 end;\n        uniform vec2 delta;\n        uniform vec2 texSize;\n        varying vec2 texCoord;\n        "+o.randomShaderFunc+"\n        void main() {\n            vec4 color = vec4(0.0);\n            float total = 0.0;\n            \n            float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n            \n            vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\n            float radius = smoothstep(0.0, 1.0, abs(dot(texCoord * texSize - start, normal)) / gradientRadius) * blurRadius;\n            for (float t = -30.0; t <= 30.0; t++) {\n                float percent = (t + offset - 0.5) / 30.0;\n                float weight = 1.0 - abs(percent);\n                vec4 sample = texture2D(texture, texCoord + delta / texSize * percent * radius);\n                \n                sample.rgb *= sample.a;\n                color += sample * weight;\n                total += weight;\n            }\n            \n            gl_FragColor = color / total;\n\n            gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n        }\n    ");var c=r-e,u=l-t,d=Math.sqrt(c*c+u*u);return n.simpleShader.call(this,n.gl.tiltShift,{blurRadius:i,gradientRadius:s,start:[e,t],end:[r,l],delta:[c/d,u/d],texSize:[this.width,this.height]}),n.simpleShader.call(this,n.gl.tiltShift,{blurRadius:i,gradientRadius:s,start:[e,t],end:[r,l],delta:[-u/d,c/d],texSize:[this.width,this.height]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bulgePinch=void 0;var n=r(0),o=function(e){return e&&e.__esModule?e:{default:e}}(r(2));t.bulgePinch=function(e,t,r,a){return n.gl.bulgePinch=n.gl.bulgePinch||(0,o.default)("\n        uniform float radius;\n        uniform float strength;\n        uniform vec2 center;\n    ","\n        coord -= center;\n        float distance = length(coord);\n        if (distance < radius) {\n            float percent = distance / radius;\n            if (strength > 0.0) {\n                coord *= mix(1.0, smoothstep(0.0, radius / distance, percent), strength * 0.75);\n            } else {\n                coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);\n            }\n        }\n        coord += center;\n    "),n.simpleShader.call(this,n.gl.bulgePinch,{radius:r,strength:clamp(-1,a,1),center:[e,t],texSize:[this.width,this.height]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.matrixWarp=void 0;var n=r(0),o=function(e){return e&&e.__esModule?e:{default:e}}(r(2));t.matrixWarp=function(e,t,r){if(n.gl.matrixWarp=n.gl.matrixWarp||(0,o.default)("\n        uniform mat3 matrix;\n        uniform bool useTextureSpace;\n    ","\n        if (useTextureSpace) coord = coord / texSize * 2.0 - 1.0;\n        vec3 warp = matrix * vec3(coord, 1.0);\n        coord = warp.xy / warp.z;\n        if (useTextureSpace) coord = (coord * 0.5 + 0.5) * texSize;\n    "),4==(e=Array.prototype.concat.apply([],e)).length)e=[e[0],e[1],0,e[2],e[3],0,0,0,1];else if(9!=e.length)throw"can only warp with 2x2 or 3x3 matrix";return n.simpleShader.call(this,n.gl.matrixWarp,{matrix:t?getInverse(e):e,texSize:[this.width,this.height],useTextureSpace:0|r}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.multiply=function(e,t){return[e[0]*t[0]+e[1]*t[3]+e[2]*t[6],e[0]*t[1]+e[1]*t[4]+e[2]*t[7],e[0]*t[2]+e[1]*t[5]+e[2]*t[8],e[3]*t[0]+e[4]*t[3]+e[5]*t[6],e[3]*t[1]+e[4]*t[4]+e[5]*t[7],e[3]*t[2]+e[4]*t[5]+e[5]*t[8],e[6]*t[0]+e[7]*t[3]+e[8]*t[6],e[6]*t[1]+e[7]*t[4]+e[8]*t[7],e[6]*t[2]+e[7]*t[5]+e[8]*t[8]]},t.getInverse=function(e){var t=e[0],r=e[1],n=e[2],o=e[3],a=e[4],l=e[5],i=e[6],s=e[7],c=e[8],u=t*a*c-t*l*s-r*o*c+r*l*i+n*o*s-n*a*i;return[(a*c-l*s)/u,(n*s-r*c)/u,(r*l-n*a)/u,(l*i-o*c)/u,(t*c-n*i)/u,(n*o-t*l)/u,(o*s-a*i)/u,(r*i-t*s)/u,(t*a-r*o)/u]},t.getSquareToQuad=function(e,t,r,n,o,a,l,i){var s=r-o,c=n-a,u=l-o,d=i-a,g=e-r+o-l,h=t-n+a-i,f=s*d-u*c,x=(g*d-u*h)/f,v=(s*h-g*c)/f;return[r-e+x*r,n-t+x*n,x,l-e+v*l,i-t+v*i,v,e,t,1]}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.perspective=void 0;var n=r(20);function o(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}t.perspective=function(e,t){var r=n.getSquareToQuad.apply(void 0,o(t)),a=n.getSquareToQuad.apply(void 0,o(e)),l=(0,n.multiply)(getInverse(r),a);return this.matrixWarp(l)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unsharpMask=void 0;var n=r(0),o=r(1);t.unsharpMask=function(e,t){return n.gl.unsharpMask=n.gl.unsharpMask||new o.Shader(null,"\n          uniform sampler2D blurredTexture;\n          uniform sampler2D originalTexture;\n          uniform float strength;\n          uniform float threshold;\n          varying vec2 texCoord;\n          void main() {\n              vec4 blurred = texture2D(blurredTexture, texCoord);\n              vec4 original = texture2D(originalTexture, texCoord);\n              gl_FragColor = mix(blurred, original, 1.0 + strength);\n          }\n      "),this._.extraTexture.ensureFormat(this._.texture),this._.texture.use(),this._.extraTexture.drawTo(function(){o.Shader.getDefaultShader().drawRect()}),this._.extraTexture.use(1),this.triangleBlur(e),n.gl.unsharpMask.textures({originalTexture:1}),n.simpleShader.call(this,n.gl.unsharpMask,{strength:t}),this._.extraTexture.unuse(1),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.triangleBlur=void 0;var n=r(0),o=r(2),a=r(1);t.triangleBlur=function(e){return n.gl.triangleBlur=n.gl.triangleBlur||new a.Shader(null,"\n        uniform sampler2D texture;\n        uniform vec2 delta;\n        varying vec2 texCoord;\n        "+o.randomShaderFunc+"\n        void main() {\n            vec4 color = vec4(0.0);\n            float total = 0.0;\n            \n            float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n            \n            for (float t = -30.0; t <= 30.0; t++) {\n                float percent = (t + offset - 0.5) / 30.0;\n                float weight = 1.0 - abs(percent);\n                vec4 sample = texture2D(texture, texCoord + delta * percent);\n                \n                sample.rgb *= sample.a;\n                color += sample * weight;\n                total += weight;\n            }\n            \n            gl_FragColor = color / total;\n            gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n        }\n    "),n.simpleShader.call(this,n.gl.triangleBlur,{delta:[e/this.width,0]}),n.simpleShader.call(this,n.gl.triangleBlur,{delta:[0,e/this.height]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.colorHalftone=void 0;var n=r(0),o=r(1);t.colorHalftone=function(e,t,r,a){return n.gl.colorHalftone=n.gl.colorHalftone||new o.Shader(null,"\n          uniform sampler2D texture;\n          uniform vec2 center;\n          uniform float angle;\n          uniform float scale;\n          uniform vec2 texSize;\n          varying vec2 texCoord;\n          \n          float pattern(float angle) {\n              float s = sin(angle), c = cos(angle);\n              vec2 tex = texCoord * texSize - center;\n              vec2 point = vec2(\n                  c * tex.x - s * tex.y,\n                  s * tex.x + c * tex.y\n              ) * scale;\n              return (sin(point.x) * sin(point.y)) * 4.0;\n          }\n          \n          void main() {\n              vec4 color = texture2D(texture, texCoord);\n              vec3 cmy = 1.0 - color.rgb;\n              float k = min(cmy.x, min(cmy.y, cmy.z));\n              cmy = (cmy - k) / (1.0 - k);\n              cmy = clamp(cmy * 10.0 - 3.0 + vec3(pattern(angle + 0.26179), pattern(angle + 1.30899), pattern(angle)), 0.0, 1.0);\n              k = clamp(k * 10.0 - 5.0 + pattern(angle + 0.78539), 0.0, 1.0);\n              gl_FragColor = vec4(1.0 - cmy - k, color.a);\n          }\n      "),n.simpleShader.call(this,n.gl.colorHalftone,{center:[e,t],angle:r,scale:Math.PI/a,texSize:[this.width,this.height]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hueSaturation=void 0;var n=r(0),o=r(1);t.hueSaturation=function(e,t){return n.gl.hueSaturation=n.gl.hueSaturation||new o.Shader(null,"\n        uniform sampler2D texture;\n        uniform float hue;\n        uniform float saturation;\n        varying vec2 texCoord;\n        void main() {\n            vec4 color = texture2D(texture, texCoord);\n            \n            /* hue adjustment, wolfram alpha: RotationTransform[angle, {1, 1, 1}][{x, y, z}] */\n            float angle = hue * 3.14159265;\n            float s = sin(angle), c = cos(angle);\n            vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\n            float len = length(color.rgb);\n            color.rgb = vec3(\n                dot(color.rgb, weights.xyz),\n                dot(color.rgb, weights.zxy),\n                dot(color.rgb, weights.yzx)\n            );\n            \n            /* saturation adjustment */\n            float average = (color.r + color.g + color.b) / 3.0;\n            if (saturation > 0.0) {\n                color.rgb += (average - color.rgb) * (1.0 - 1.0 / (1.001 - saturation));\n            } else {\n                color.rgb += (average - color.rgb) * (-saturation);\n            }\n            \n            gl_FragColor = color;\n        }\n    "),n.simpleShader.call(this,n.gl.hueSaturation,{hue:clamp(-1,e,1),saturation:clamp(-1,t,1)}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hexagonalPixelate=void 0;var n=r(0),o=r(1);t.hexagonalPixelate=function(e,t,r){return n.gl.hexagonalPixelate=n.gl.hexagonalPixelate||new o.Shader(null,"\n          uniform sampler2D texture;\n          uniform vec2 center;\n          uniform float scale;\n          uniform vec2 texSize;\n          varying vec2 texCoord;\n          void main() {\n              vec2 tex = (texCoord * texSize - center) / scale;\n              tex.y /= 0.866025404;\n              tex.x -= tex.y * 0.5;\n              \n              vec2 a;\n              if (tex.x + tex.y - floor(tex.x) - floor(tex.y) < 1.0) a = vec2(floor(tex.x), floor(tex.y));\n              else a = vec2(ceil(tex.x), ceil(tex.y));\n              vec2 b = vec2(ceil(tex.x), floor(tex.y));\n              vec2 c = vec2(floor(tex.x), ceil(tex.y));\n              \n              vec3 TEX = vec3(tex.x, tex.y, 1.0 - tex.x - tex.y);\n              vec3 A = vec3(a.x, a.y, 1.0 - a.x - a.y);\n              vec3 B = vec3(b.x, b.y, 1.0 - b.x - b.y);\n              vec3 C = vec3(c.x, c.y, 1.0 - c.x - c.y);\n              \n              float alen = length(TEX - A);\n              float blen = length(TEX - B);\n              float clen = length(TEX - C);\n              \n              vec2 choice;\n              if (alen < blen) {\n                  if (alen < clen) choice = a;\n                  else choice = c;\n              } else {\n                  if (blen < clen) choice = b;\n                  else choice = c;\n              }\n              \n              choice.x += choice.y * 0.5;\n              choice.y *= 0.866025404;\n              choice *= scale / texSize;\n              gl_FragColor = texture2D(texture, choice + center / texSize);\n          }\n      "),n.simpleShader.call(this,n.gl.hexagonalPixelate,{center:[e,t],scale:r,texSize:[this.width,this.height]}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.brightnessContrast=void 0;var n=r(0),o=r(1);t.brightnessContrast=function(e,t){return n.gl.brightnessContrast=n.gl.brightnessContrast||new o.Shader(null,"\n        uniform sampler2D texture;\n        uniform float brightness;\n        uniform float contrast;\n        varying vec2 texCoord;\n        void main() {\n            vec4 color = texture2D(texture, texCoord);\n            color.rgb += brightness;\n            if (contrast > 0.0) {\n                color.rgb = (color.rgb - 0.5) / (1.0 - contrast) + 0.5;\n            } else {\n                color.rgb = (color.rgb - 0.5) * (1.0 + contrast) + 0.5;\n            }\n            gl_FragColor = color;\n        }\n    "),n.simpleShader.call(this,n.gl.brightnessContrast,{brightness:clamp(-1,e,1),contrast:clamp(-1,t,1)}),this}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Texture=void 0;var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),o=r(0);var a=function(){function e(t,r,n,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.gl=o.gl,this.id=o.gl.createTexture(),this.width=t,this.height=r,this.format=n,this.type=a,o.gl.bindTexture(o.gl.TEXTURE_2D,this.id),o.gl.texParameteri(o.gl.TEXTURE_2D,o.gl.TEXTURE_MAG_FILTER,o.gl.LINEAR),o.gl.texParameteri(o.gl.TEXTURE_2D,o.gl.TEXTURE_MIN_FILTER,o.gl.LINEAR),o.gl.texParameteri(o.gl.TEXTURE_2D,o.gl.TEXTURE_WRAP_S,o.gl.CLAMP_TO_EDGE),o.gl.texParameteri(o.gl.TEXTURE_2D,o.gl.TEXTURE_WRAP_T,o.gl.CLAMP_TO_EDGE),t&&r&&o.gl.texImage2D(o.gl.TEXTURE_2D,0,this.format,t,r,0,this.format,this.type,null)}return n(e,[{key:"loadContentsOf",value:function(e){this.width=e.width||e.videoWidth,this.height=e.height||e.videoHeight,o.gl.bindTexture(o.gl.TEXTURE_2D,this.id),o.gl.texImage2D(o.gl.TEXTURE_2D,0,this.format,this.format,this.type,e)}},{key:"initFromBytes",value:function(e,t,r){this.width=e,this.height=t,this.format=o.gl.RGBA,this.type=o.gl.UNSIGNED_BYTE,o.gl.bindTexture(o.gl.TEXTURE_2D,this.id),o.gl.texImage2D(o.gl.TEXTURE_2D,0,o.gl.RGBA,e,t,0,o.gl.RGBA,this.type,new Uint8Array(r))}},{key:"destroy",value:function(){o.gl.deleteTexture(this.id),this.id=null}},{key:"use",value:function(e){o.gl.activeTexture(o.gl.TEXTURE0+(e||0)),o.gl.bindTexture(o.gl.TEXTURE_2D,this.id)}},{key:"unuse",value:function(e){o.gl.activeTexture(o.gl.TEXTURE0+(e||0)),o.gl.bindTexture(o.gl.TEXTURE_2D,null)}},{key:"ensureFormat",value:function(e,t,r,n){if(1==arguments.length){var a=arguments[0];e=a.width,t=a.height,r=a.format,n=a.type}e==this.width&&t==this.height&&r==this.format&&n==this.type||(this.width=e,this.height=t,this.format=r,this.type=n,o.gl.bindTexture(o.gl.TEXTURE_2D,this.id),o.gl.texImage2D(o.gl.TEXTURE_2D,0,this.format,e,t,0,this.format,this.type,null))}},{key:"drawTo",value:function(e){if(o.gl.framebuffer=o.gl.framebuffer||o.gl.createFramebuffer(),o.gl.bindFramebuffer(o.gl.FRAMEBUFFER,o.gl.framebuffer),o.gl.framebufferTexture2D(o.gl.FRAMEBUFFER,o.gl.COLOR_ATTACHMENT0,o.gl.TEXTURE_2D,this.id,0),o.gl.checkFramebufferStatus(o.gl.FRAMEBUFFER)!==o.gl.FRAMEBUFFER_COMPLETE)throw new Error("incomplete framebuffer");o.gl.viewport(0,0,this.width,this.height),e(),o.gl.bindFramebuffer(o.gl.FRAMEBUFFER,null)}},{key:"fillUsingCanvas",value:function(e){return e(i(this)),this.format=o.gl.RGBA,this.type=o.gl.UNSIGNED_BYTE,o.gl.bindTexture(o.gl.TEXTURE_2D,this.id),o.gl.texImage2D(o.gl.TEXTURE_2D,0,o.gl.RGBA,o.gl.RGBA,o.gl.UNSIGNED_BYTE,l),this}},{key:"toImage",value:function(e){this.use(),Shader.getDefaultShader().drawRect();var t=this.width*this.height*4,r=new Uint8Array(t),n=i(this),a=n.createImageData(this.width,this.height);o.gl.readPixels(0,0,this.width,this.height,o.gl.RGBA,o.gl.UNSIGNED_BYTE,r);for(var s=0;s<t;s++)a.data[s]=r[s];n.putImageData(a,0,0),e.src=l.toDataURL()}},{key:"swapWith",value:function(e){var t=void 0;t=e.id,e.id=this.id,this.id=t,t=e.width,e.width=this.width,this.width=t,t=e.height,e.height=this.height,this.height=t,t=e.format,e.format=this.format,this.format=t}}]),e}();a.fromElement=function(e){var t=new a(0,0,o.gl.RGBA,o.gl.UNSIGNED_BYTE);return t.loadContentsOf(e),t};var l=null;function i(e){null==l&&(l=document.createElement("canvas")),l.width=e.width,l.height=e.height;var t=l.getContext("2d");return t.clearRect(0,0,l.width,l.height),t}t.Texture=a},function(e,t,r){"use strict";!function(){try{var e=document.createElement("canvas").getContext("experimental-webgl")}catch(e){}if(e&&-1===e.getSupportedExtensions().indexOf("OES_texture_float_linear")&&function(e){if(!e.getExtension("OES_texture_float"))return!1;var t=e.createFramebuffer(),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,1,1,0,e.RGBA,e.UNSIGNED_BYTE,null),e.bindFramebuffer(e.FRAMEBUFFER,t),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);var n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,2,2,0,e.RGBA,e.FLOAT,new Float32Array([2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]));var o=e.createProgram(),a=e.createShader(e.VERTEX_SHADER),l=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(a,"      attribute vec2 vertex;      void main() {        gl_Position = vec4(vertex, 0.0, 1.0);      }    "),e.shaderSource(l,"      uniform sampler2D texture;      void main() {        gl_FragColor = texture2D(texture, vec2(0.5));      }    "),e.compileShader(a),e.compileShader(l),e.attachShader(o,a),e.attachShader(o,l),e.linkProgram(o);var i=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,i),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0]),e.STREAM_DRAW),e.enableVertexAttribArray(0),e.vertexAttribPointer(0,2,e.FLOAT,!1,0,0);var s=new Uint8Array(4);return e.useProgram(o),e.viewport(0,0,1,1),e.bindTexture(e.TEXTURE_2D,n),e.drawArrays(e.POINTS,0,1),e.readPixels(0,0,1,1,e.RGBA,e.UNSIGNED_BYTE,s),127===s[0]||128===s[0]}(e)){var t=WebGLRenderingContext.prototype.getExtension,r=WebGLRenderingContext.prototype.getSupportedExtensions;WebGLRenderingContext.prototype.getExtension=function(e){return"OES_texture_float_linear"===e?function(e){return void 0===e.$OES_texture_float_linear$&&Object.defineProperty(e,"$OES_texture_float_linear$",{enumerable:!1,configurable:!1,writable:!1,value:new function(){}}),e.$OES_texture_float_linear$}(this):t.call(this,e)},WebGLRenderingContext.prototype.getSupportedExtensions=function(){var e=r.call(this);return-1===e.indexOf("OES_texture_float_linear")&&e.push("OES_texture_float_linear"),e}}}()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.canvas=void 0,r(29);var n=r(0);t.canvas=n.canvas},function(e,t,r){e.exports=r(30)}]);